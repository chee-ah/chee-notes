
[{"content":"","date":"1 December 2024","externalUrl":null,"permalink":"/","section":"Chee's Notes","summary":"","title":"Chee's Notes","type":"page"},{"content":"","date":"1 December 2024","externalUrl":null,"permalink":"/tags/debian/","section":"Tags","summary":"","title":"Debian","type":"tags"},{"content":"","date":"1 December 2024","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"1 December 2024","externalUrl":null,"permalink":"/linux/","section":"Linux","summary":"","title":"Linux","type":"linux"},{"content":" Create a VM in VirtualBox # Summary # Before we even get started learning, we probably need to have a real Linux machine to work on. Because while macOS is a Unix like system, and it\u0026rsquo;s very similar to Linux in a lot of ways, there are still a few differences.\nTo get a real Linux machine without actually needing to buy a server, we\u0026rsquo;ll use something called a hypervisor. In a nutshell a hypervisor is a piece of software that produces virtual computers, by emulating all its hardware components, like the memory, the disks, the motherboard, a screen, and so on.\nThe aforementioned virtual computers are most commonly called virtual machines, and they are built in such a way that each virtual machine believes it\u0026rsquo;s a real computer on its own, it has no idea that the hypervisor exists, but really it\u0026rsquo;s just another process on the hypervisor.\nThere are different types of hypervisors with different purposes, but for our use case we\u0026rsquo;ll use VirtualBox, which is a type 2 hypervisor. Type 2 just means that simply an application on your machine So it just runs like any other app, and because of that, it\u0026rsquo;s relatively simple to set up and use.\nIt\u0026rsquo;s not very relevant to our discussion right now, but probably still important to know that hypervisor technologies are at the core of what people call the cloud. Platform like AWS, and GCP offer virtual machines as a service, and all the intricacies of what happens under the hood are hidden to the end users. But the core technologies really just are virtual machines and hypervisors. Typically, in the cloud, or in enterprise systems, the hypervisors used would be type 1 those systems are also sometimes referred to as Bare Metal hypervisors, and while they are slightly more complex to configure they offer better performance.\nInstall VirtualBox # We are using a mac sporting an Apple Silicon Chip, so the instruction set is arm64. This is just fancy talk to say that we\u0026rsquo;re using a cool new type of CPU, but we need to know that to choose the right versions for the components we\u0026rsquo;re about to download, you can think about it like engines. Lets say if an intel based engine needs diesel fuel, an arm64 engine runs on petrol, we need to make sure we give it the right thing.\nFirst we\u0026rsquo;ll install Virtual Box from their download page - https://www.virtualbox.org/wiki/Downloads And we\u0026rsquo;re choosing the Apple Silicon type of fuel. Download a Debian ISO # Ok, now we also need an install disk for Debian, again we need it to be the Apple Silicon type of fuel we can download it from here: https://cdimage.debian.org/debian-cd/current/arm64/iso-cd/\nNote that the file names says arm64, that\u0026rsquo;s how we know we got the right one. Configure the Virtual Machine # In the VirtualBox app we\u0026rsquo;ll click new, and configure the desired name of the vm as well as the path to the ISO image we downloaded, we\u0026rsquo;ll also skip the unattended install, because we want to learn how to do this ourselves, we can then just click next on all the subsequent windows. Simply note that we are choosing how much disk, memory, cpu and so on we would like to emulate, but the defaults are fine Ok we\u0026rsquo;re done defining what the virtual machine should look like, now we have a virtual machine in stopped state, with an install disk in its drive bay. Let\u0026rsquo;s power it up and see what happens. Install Debian # This happened very quick but the UEFI started the grub bootloader on the cdrom, which gives us a few options We want to do the graphical installation. We\u0026rsquo;re then in the graphical installation wizard for Debian, we can just follow the prompt, they are all very self-explanatory, we do things like choosing the language, the region, the keyboard layout and so on. Choose to your heart\u0026rsquo;s contempt, or leave the default settings if you aren\u0026rsquo;t sure until you\u0026rsquo;re asked to choose the root password, if this was a production system, of course it would be important here to choose a safe password, but we\u0026rsquo;re just testing here, and we have problems respecting rules, so we\u0026rsquo;re just going to use root:root. After that we\u0026rsquo;ll be asked to choose a non-root username, I\u0026rsquo;ll just call it chee, password chee, and continue with the defaults until we\u0026rsquo;re asked how we want to partition the disks, we\u0026rsquo;ll choose guided partitioning and there will be LVM references here, this should sound familiar. But for the sake of simplicity we\u0026rsquo;ll choose to use the entire disk without LVM, all files in one partition, and we confirm that yes, we agree to write the changes to disk. Now the install disk is actually copying files into the virtual drive, effectively installing Linux on disk. We can just keep going with the defaults until we\u0026rsquo;re asked to choose what desktop environment we want, this is what\u0026rsquo;s going to define the look and feel of the system, there are many option here, but we\u0026rsquo;ll just choose the default debian experience and continue. Keep choosing the default values until the Installer is done and asks us to reboot. First Boot # Once the box has rebooted, we are faced with a grub again but as you can see it looks different from the first time we saw it. That\u0026rsquo;s because the first one was the grub of the installation media itself, and it was running directly from the cdrom. This time we\u0026rsquo;re looking at the grub of the brand new debian system we just installed on disk. Why did it not just boot directly on the disk again you may ask? Because the debian installer intelligently sent an eject disk instruction to VirtualBox and unmounted the cdrom automatically for us, see the greyed out cdrom in the status bar. But with a different os if we may have needed to remove the cdrom from the reader or change the boot order in the bios/uefi to avoid booting forever on the cdrom. Anyway we see grub, and as we know grub is a bootloader ðŸ¥¾, and a bootloader\u0026rsquo;s purpose is to be and entrypoint for the bios/uefi, and a launchpad for linux ðŸš€. So let\u0026rsquo;s launch debian and see what happens. The green ok list here is systemd, this is our system and service manager, and it\u0026rsquo;s currently bootstraping our Linux Debian OS, initialising things like the network, drivers, multi-user target graphical target and much more. When it\u0026rsquo;s done, it will leave us at the login page for the unprivileged user we created during the installation. So we can just log in with the password we chose And ta-da! We have created our first linux virtual machine. Conclusion and recap # Now while this article showed how to create:\nA vm with a Debian OS, on a VirtualBox hypervisor, on an AppleSilicon architecture We could change any of those 3 variables, the concepts remain largely the same, for instance, we could build:\nA vm with a Centos OS, on a VirtualBox hypervisor, on an AppleSilicon architecture A vm with a RedHat OS, on a KVM hypervisor, on an Intel x86 architecture A vm with a Ubuntu OS, on a ESXi hypervisor, on an MIPS architecture In fact, we just need to remain attentive to not try to install an OS or a hypervisor on the wrong CPU architecture, but otherwise the concepts are always the same:\nHave a physical machine and be aware of its CPU architecture Install a hypervisor on it with the corresponding CPU architecture Find an installation media for the OS we want to virtualize (same CPU architecture) Create a VM in the hypervisor, and mount the installation media to it Make sure the bios or uefi boots on the installation media Follow the installer\u0026rsquo;s on screen instruction until the os is installed on disk Remove the installation media and reboot, or force the bios/uefi to boot on disk You\u0026rsquo;re done just watch the following process unfold on boot: bios/uefi \u0026gt; grub \u0026gt; systemd \u0026gt; login ","date":"1 December 2024","externalUrl":null,"permalink":"/linux/1733052226223-others---create-a-virtual-machine-in-virtualbox/","section":"Linux","summary":"","title":"Others - Create a Virtual Machine in VirtualBox","type":"linux"},{"content":"","date":"1 December 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"1 December 2024","externalUrl":null,"permalink":"/tags/virtual-machine/","section":"Tags","summary":"","title":"Virtual Machine","type":"tags"},{"content":"","date":"1 December 2024","externalUrl":null,"permalink":"/tags/virtualbox/","section":"Tags","summary":"","title":"Virtualbox","type":"tags"},{"content":"","date":"1 December 2024","externalUrl":null,"permalink":"/tags/vm/","section":"Tags","summary":"","title":"Vm","type":"tags"},{"content":"","date":"23 August 2024","externalUrl":null,"permalink":"/tags/linux-essentials/","section":"Tags","summary":"","title":"Linux Essentials","type":"tags"},{"content":"","date":"23 August 2024","externalUrl":null,"permalink":"/tags/lpi/","section":"Tags","summary":"","title":"LPI","type":"tags"},{"content":"","date":"23 August 2024","externalUrl":null,"permalink":"/series/lpi---linux-essentials/","section":"Series","summary":"","title":"LPI - Linux Essentials","type":"series"},{"content":" Swap # quick reminder:\nwhat where conceptually example memory ram (random access memeory) ephemeral program variable disk file system persistent file Swap files are a way to use the file system for the same purpose as ram, when the ram is full.\nDesign hard disk layout and manage swap space: # Configure and Manage Swap Space:\nCreate a Swap space: Swap is an area where Linux can temporarily move some data from the computer\u0026rsquo;s random access memory or RAM. A swap partition is essentially an extension of the RAM, on disk.\nTo check if the system uses any kind of swap areas:\nswapon --show If one partition is used already as swap, we can add more partitions if we want:\nFirst, have a look at what partitions we have available, using lsblk:\nlsblk Then, we can create a partition at\u0026hellip; Specifically to be used as swap.\nBefore it has to be used as a swap, it has to be prepared. Basically, it is a similar process with formatting a USB stick, write some small data on the partition, labels it, now the system knows this is meant to be used as swap area.\nTo do it:\nTell Linux to use this partition as swap: sudo mkswap /dev/vdb3 *Setting up swap space version 1, size = 2 GiB (2146430976 bytes) no label, UUID=6d6f451e-5fa4-4cd5-b627-b0f39c810002* Use the swapon command verbose option makes the command output more detailed about what we are doing. sudo swapon --verbose /dev/vdb3 *swapon: /dev/vdb3: found signature [pagesize=4096, signature=swap]* *swapon: /dev/vdb3* swapon --show But if we reboot this systems, the partition won\u0026rsquo;t be used as swap anymore, we\u0026rsquo;ll see later how to tell Linux to automatically use this as swap every time.\nTo stop using our partition as a swap space:\nsudo swapoff /dev/vdb3 Instead of using partitions, we can also use a simple file as swap. First, we need to create an empty file and fill it with zeros. (binary zeros). We will use a utility called dd, and we will have it use these parameters.\nsudo dd if=/dev/zero of=/swap bs=1M count=128 sudo: SuperUserDO just do things as root if=/dev/zero: Input /dev/zero that is a device generating zeros of=/swap: To tell dd where to write the output. bs=1M: Means block size and we chose a block size of 1M count=128: count means we are counting 128 times a block of 1M So Basically, we create a file called swap and using a device with generates an infinite number of zeros, we fill up the file with zeros, counting 128 * 1 Megabyte until we stop, so of course our file will be 128MB exactly in the end, we can double check that with the following command (l=list, h=human):\nls -lh /swap ","date":"23 August 2024","externalUrl":null,"permalink":"/linux/1724441668892-lpi---linux-essentials---swap/","section":"Linux","summary":"","title":"LPI - Linux Essentials - Swap","type":"linux"},{"content":"","date":"23 August 2024","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"23 August 2024","externalUrl":null,"permalink":"/tags/study-notes/","section":"Tags","summary":"","title":"Study Notes","type":"tags"},{"content":"","date":"23 August 2024","externalUrl":null,"permalink":"/tags/swap/","section":"Tags","summary":"","title":"Swap","type":"tags"},{"content":" Create a multipass: # brew install multipass multipass list multipass shell chee-vm Log out: # Control D =\u0026gt; back:\nmultipass shell chee-vm Determine and Configure Hardware setting: # BIOS = Basic Input/Output System # Set the date and time for the hardware clock Disable or enable integrated peripherals Configure error protection Change hardware settings like IRQs and DMA Choose the order of boot devices\nInspecting Devices in Linux Once Linux loads, the operating system needs to take the necessary steps to make sure hardware can be used. If the hardware isn\u0026rsquo;t detected by the operating system or the port into which it\u0026rsquo;s been plugged is defective but if a piece of hardware is correctly detected by the operating system and isn\u0026rsquo;t working properly we need to take additional steps like making sure the right kernel module or driver is loaded. To show all the device that are connected to the peripheral Component Interconnect bus (PCI bus) sudo lspci when we want to focus a bit better on some extra of the information that we can see about the device on the system by using the-s option with LSPCI followed by the address of the piece of hardware -v or verbose flag\nsudo lspci -s 00:03.0 -v In addition to the hardware address the component, we can also see the subsystem field which shows the brand and model. We can also see the kernel driver that is in use (kernel module). If we want to narrow the output down to focus on the kernel module being used, we can use the -k flag along with the hardware address\nsudo lspci -s 00:03.0 -k To identify devices that are connected by usb sudo lsusb For more detail, we can add the -v flag just like with LSPCI. Or we can also specify a device ID by using the -d option\nsudo lsusb -v -d 1781:0c9f Devices can be viewed in a hierarchical or tree format by using the -t option to get specific information about particular device, we can use the -s flag, followed by the bus and dev numbers for the device\nsudo lsusb -s 01:20 (bluetooth adapter)\nTo see the list of kernel modules currently loaded on the system: sudo lsmod To look at the module name, we can use a utility fgrep to search and narrow things down:\nsudo lsmod | fgrep -i snd If we are having trouble with a piece of hardware we might want to unload the kernel module that is currently in use:(-r: remove)\nsudo modprobe -r snd-hda-intel Kernel module also have parameters that can be changed and each module has its own specific parameters. Most of the time we want to keep the default options. We can see module information by its author, license, identification,\u0026hellip;\nsudo modinfo snd we can make persistent changes to these parameters by setting them in a file located at etc/modprode.conf or creating individual files with the .con extension on the directory /etc/modprode.d./snd.conf If the module is causing a problem , we can block the kernel from loading it by specifying it in a special located in etc/modprobe.d/blacklist.conf we would just add an entry in that file that reads like this blacklist snd, to blacklist the snd module to keep it from loading.\nUEFI = Unified Extensible Firmware Interface # POST = Power-On Self-Test # Boot the system: # BIOS or UEFI \u0026ndash;\u0026gt; Boot-loader (bootstrap) \u0026mdash;\u0026gt; Kernel \u0026mdash;\u0026gt; Init: # When the BIOS loads, the following four steps take place:\nPOST Identifies simple hardware failures Activates basic components like video output, the keyboard, and storage Loads the bootstrap from the MBR Loads the second stage of the boot-loader and pass options to the kernel UEFI: Unified Extensible Firmware Interface differs from BIOS in several key ways:\nNVRAM EFI applications FAT file-systems or ISO-9660 EFI System Partition (ESP) EFI directory Doesn\u0026rsquo;t reply on an MBR but instead looks for settings stored in its non-volatile memory, or NVRAM. These setting contain the location of UEFI-compatible programs called EFI applications which can be executed automatically or called from a boot menu. These can be boot-loader, operating system selectors, or diagnostic utilities. The EFI applications must be on a regular storage device partition using a compatible file system.\nWhen UEFI loads:\nPOST Identifies simple hardware failures Activates basic components like video output, the keyboard, and storage Executes EFI applications stored in the ESP partition, such as the boot-loader The boot-loader loads the kernel Also supports Secure Boot which is only allows signed EFI applications to execute GRUB (for the x86 architecture boot-loader): Grand Unified Boot-loader SHIFT if the system is using BIOS and ESC if the system is using UEFI to see that link menu\nMost useful kernel parameters: # - acpi: Enable or disable ACPI support Example: acpi=off disables - init: Set system init Example: init=/bin/bash - systemd.unit: Set systemd target Example: system.unit=graphical.target - mem: Set available system RAM Example: mem=512M - maxcpus: Limits processors or cores Example: maxcpus=0 or maxcpus=2 - quiet : Hides boot messages - vga: Selects a video mode Example: vga=ask - root: Sets the root partition Example: root=/dev/sda3 - rootflags: Mount options for the root filesystem - ro Mount: root filesystem read-only - rw Mount : root filesystem read/write Kernel loaded into RAM: # Kernel mounts all file-systems configured in /etc/fstab Kernel loads init. First program that starts all others. initramfs is removed from RAM\nDifferent Init types: # SysV standard Controls daemons using runlevels. Runlevels numbered 0 to 6. systemd Modern service manager with concurrent structure. Common default. Upstart Parallel startup. Formerly used by Ubuntu, replaced by systemd. To see the message in the kernel ring buffer: # dmesg On systems that use systemd, the journalctl command can be used to show the initialization messages:\njournalctl --list-boots Using the -b or the \u0026ndash;boot=options to specify a boot number and see messages from that initialization.\nFor example: journalctl -b 0, -b 0 is going to show us information for the current boot. The operating system is going to store initialization messages and other log entries in the directory /var/log.\n/var/log/ initialization and system logs.\njournalctl -D /var/log/other_directory Change Runlevels/ Boot Target and Shutdown or Reboot System: # SysVinit # PID 1 The service manager process. Runlevel A group of services for a purpose. Numbered 0 to 6.\nRunlevel 0 System shutdown. Runlevel 1 Single-user mode, without networking. Maintenance mode. Runlevel 2,3,4 Mulit-user mode. Networking available. 2 and 4 often unused. Runlevel 5 Multi-user mode with graphical login. Runlevel 6 System restart. /sbin/init Manages runlevels and services.\nSet Multi-user.target default when start:\nSystemctl set-default multi-user.target Graphical.target: systemctl set-default graphical.target Check the current boot default mode: systemctl get default Temporarily switch from graphical -\u0026gt; multi-user: systemctl isolate multi-user.target multi-user -\u0026gt; graphical: systemctl isolate graphical.target or\ninit 5 /etc/inittab: /etc/inittab defines each runlevel. /etc/init.d/ contains scripts for each runlevel.\nid:runlevels:action:process\nId is a generic name up to four characters in length used to identify the entry. The runlevels entry is a list of runlevel numbers to perform a specific action. The action term determines how init will execute the process specified by the process term. The available actions are:\nboot Executed during system initialization. Ignores runlevels field. bootwait Executed during system initialization and init waits until finished. Ignores runlevels field. sysinit Executed after system initialization. Ignores runlevels field. wait Executed for the given runlevels. Init waits until finished. respawn Process will be restarted if terminated. ctrlaltdel Executed when init receives SIGINT, triggered by CTRL+ALT+DEL. id:x:initdefault Defines default run-level. If we open etc/inittab with editor like vi,\nsudo vi /etc/inittab If we make a change to the /etc/inittab file after we save and exit our editor, we run telinit with the q option to have init reload its configuration so it\u0026rsquo;s aware of those changes\nsudo telinit q The scripts used by each level are stored in /ect/init.d directory . If we take a look inside of that directory, we will see subdirectories of each runlevel labeled.\nls /etc/init.d/ The same script may be present in more than one subdirectory, if it runs in different levels, the first letters of scripts file name will indicates whether the script is mean to stop a service, or start the service when it runs. Files that start with K kill services when they run Files that start with S start services when they run If we use the runlevel command , without any parameters, it will tell us our current system runlevel\nrunlevel The first value it shows is the previous system runlevel, for example: N 3, a letter N mean the runlevel has not changed since the last system boot, and the second number is the current runlevel , in ths case, 3. We can switch between runlevel using the telinit command , for example:\nsudo telinit 1 Systemd: # Systemd is now the most used set of tool to manage resources and service in Linux. Systemd refers to resources and services as units. A systemd unit will have a name, a type, and a configuration file. For example, an Apache Web server would have an\u0026gt;a unit of http.service on Red Hat systems.\nhttpd.service (Red Hat) or apache2.service (Debian)\nservice: Active system resources. Can be initiated, interrupted, and reloaded. socket: Filesystem or network socket. device: A hardware device identified by the kernel. mount: A mount point defined in /etc/fstab. automount: A mount point mounted automatically. target: A group of units managed as a single unit. snapshot: A saved stated of the systemd manager. The main command for controlling systemd units is systemctl. The command systemctl is use to execute all tasks regarding unit activation: deactivation,execution,interruption,monitoring, \u0026hellip;. For the fictitious unit called unit.service, for example:\nStart the unit: sudo systemctl start unit.service Stop the unit: sudo systemctl stop unit.service Restart a unit: sudo systemctl restart unit.service Show the status of a unit, including if it is running or not: sudo systemctl status unit.service Show if the unit is running or inactive if it is not: sudo systemctl is-active unit.service Enable a unit: means that it is going to load whenever the system boots up sudo systemctl enable unit.service Disable a unit: make sure a unit will not start with the system sudo systemctl disable unit.service The is-enabled verifies if a unit is going to start with the system. The answer is stored in a variable. The value of zero indicates that the unit is going to start with the system. The value 1 indicates that the unit does not start with the system. sudo systemctl is-enabled unit.service The command systemctl can also control the system targets. The multi-user.target, for example combines all units required by the multi-user system environment, that\u0026rsquo;s like running level 3 in the system using system 5\nsudo systemctl isolate multi-user.target .Set the default target:\nsudo systemctl set-default multi-user.target . Get/determine the default\n$ sudo systemctl get-default (graphical.target) We can also use systemctl isolate to manually change just like you would use the telinit command in system 5. Like systemd copying SystemV, the default target should never point to shutdown.target, as it is going to correspond to run level zero. The configuration files associated with every unit can be found in this directory: /lib/systemd/system/ contains unit files for every unit.\nsudo systemctl list-unit-files We can specify the type of option to ony select units for a given types:\nsudo systemctl list-unit-files --type=service We could specify services or target to be shown:\nsudo systemctl list-unit-files --type=target Active units or units that have been active during the current system session can be list with the ctl init units. It also responsible systemd for triggering and responding to power related events . This suspend command below will put the system in low-power mode, keeping data in memory\nsudo systemctl suspend To hibernate, copy all memory data to disk so the current state of the system can be recovered after it\u0026rsquo;s powered back on.\nsudo systemctl hibernate This actions associated with these type of events are defined in the file /etc/systemd/logind.conf defines action associated with power events. And it can also be found in separate files in /etc/systemd/logind.conf/d/ if no other power , manager like acpid is running on the system\nUpstart: # The initialization scripts used by Upstart, they are going to be in the directory /etc/init/ contains initialization scripts for Upstart. Upstart is a discontinued event-based replacement for the traditional init daemon, the method by which several Unix-like computer operating systems perform tasks when the computer is started.\nList the system services: sudo initctl list It is going to show the current state of the services. And if it\u0026rsquo;s available, their PID number.\navahi-cups-reload stop/waiting avahi-daemon start/running, process 1123 mountall-net stop/waiting mountnfs-bootclean.sh start/running nmbd start/running, process 3085 passwd stop/waiting rc stop/waiting rsyslog start/running, process 1095 tty4 start/running, process 1761 udev start/running, process 1073 upstart-udev-bridge start/running, process 1066 console-setup stop/waiting irqbalance start/running, process 1842 plymouth-log stop/waiting smbd start/running, process 1457 tty5 start/running, process 1764 failsafe stop/waiting Every Upstart action has its own independent command, for example: The start command can be used to initialize the sixth virtual terminal:\nstart tty6 The current status of a resource can be viewed, verified with the status command:\nstatus tty6 tty6 start/running, process 3282 And interrupting a service can be done with the stop command:\nstop tty6 Upstart does not use the /etc/inittab file to determine runlevels, but the legacy commands runlevel and telinit can still be used to verify and alternate (luan phien) between runlevels.\nShutdown and Restart: # sudo shutdown [option] time [message] sudo shutdown 02:00 sudo shutdown +20 sudo shutdown now sudo syestemctl reboot sudo syestemctl poweroff sudo wall \u0026#39;System going into maintenance mode in 5 minutes!\u0026#39; Reference: # LPI - learning material (in Vietnamese)\n","date":"6 June 2024","externalUrl":null,"permalink":"/linux/1717706307788-lpi---linux-essentials---system-architecture/","section":"Linux","summary":"","title":"LPI - Linux Essentials - System Architecture","type":"linux"},{"content":"","date":"6 May 2024","externalUrl":null,"permalink":"/tags/bash/","section":"Tags","summary":"","title":"Bash","type":"tags"},{"content":"","date":"6 May 2024","externalUrl":null,"permalink":"/tags/go/","section":"Tags","summary":"","title":"Go","type":"tags"},{"content":"","date":"6 May 2024","externalUrl":null,"permalink":"/tags/golang/","section":"Tags","summary":"","title":"Golang","type":"tags"},{"content":"","date":"6 May 2024","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"6 May 2024","externalUrl":null,"permalink":"/tags/node/","section":"Tags","summary":"","title":"Node","type":"tags"},{"content":"","date":"6 May 2024","externalUrl":null,"permalink":"/tags/notes/","section":"Tags","summary":"","title":"Notes","type":"tags"},{"content":"","date":"6 May 2024","externalUrl":null,"permalink":"/tags/npm/","section":"Tags","summary":"","title":"Npm","type":"tags"},{"content":"","date":"6 May 2024","externalUrl":null,"permalink":"/tags/other/","section":"Tags","summary":"","title":"Other","type":"tags"},{"content":" Create articles in a hugo site # In these notes we\u0026rsquo;ll describe the process of writing and publishing a new article in for this here website.\nInstall the blowfish tools # This site is using the static site generator hugo, with the theme blowfish. This theme comes with a handy little set of command line tools. While hugo itself is written in golang, the blowfish tolls are written in node js, so first of all we need to install npm, the node package manager on our workstation.\nFirst update and upgrade brew.\nbrew update brew upgrade Then install npm\nbrew install npm Once we have installed npm which is a package manager for node js packages, we can now install the blowfish tools, because they\u0026rsquo;re written in node js.\nnpm i -g blowfish-tools We can use which, just to confirm that we now have those tools somewhere in our path.\nwhich blowfish-tools Use the blowfish tools # We can do a lot of things pertaining to the configuration of our static site with those tools, but the point of this article really is just to describe how to create a new article in the site. So let\u0026rsquo;s do that.\nStart to tools. This will launch a little interactive app whith a nice blowfish ascii art.\nblowfish-tools Then we\u0026rsquo;ll need to do the following:\n\u0026gt; select the option to `Generate a new article` \u0026gt; select the category of the site where we want the article to be, for this one: `linux` \u0026gt; choose a name for the article, for this one: \u0026#39;Others - Notes about the bash shell\u0026#39; \u0026gt; exit the tools Now from a normal bash shell we can navigate in the directory structure of our site.\ncd chee-notes ls -la cd contents ls -la cd linux ls -la We\u0026rsquo;ll see that the npm app created a new folder here for us, see the Notes-about-the-bash-shell\nls -l total 0 drwxr-xr-x@ 4 chee staff 128 May 6 21:36 1712426513705-LPI---Linux-Essentials---The-Basics drwxr-xr-x@ 4 chee staff 128 Apr 6 22:24 1712426557493-LPI---Linux-Essentials---Common-CLI-Tools drwxr-xr-x@ 4 chee staff 128 Apr 6 22:24 1712426570291-LPI---Linux-Essentials---Shell-Redirects drwxr-xr-x@ 5 chee staff 160 May 6 22:02 1715028080161-Others---Create-articles-in-a-hugo-site drwxr-xr-x@ 4 chee staff 128 May 6 22:12 1715029765425-Others---Notes-about-the-bash-shell If we navigate to that new folder, we have files created for us in there as well\ncd 1715029765425-Others---Notes-about-the-bash-shell tree . . â”œâ”€â”€ featured.png â””â”€â”€ index.md The index.md is where our markdown notes are gonna go, and it already has automatically generated markdown metadata at the top, it\u0026rsquo;s basically just yaml key value pairs that describe our document for better seo latter on, seo means search engine optimisation, it\u0026rsquo;s just how google finds, and understands the content that is in the page. We can of course, modify or improve that info manually. For instance we can add tags relevant to the content.\nThe featured.png file is of course an image, this is image that will show up in the page for our article, the tools have setup a default image for us, but we can change it to whatever we want, as long as it\u0026rsquo;s the same file name, but for us, because it\u0026rsquo;s in the linux section we\u0026rsquo;ll use the penguins, because of course.\nTo do that, let\u0026rsquo;s copy the penguins from an older article\ncp ../1712426513705-LPI---Linux-Essentials---The-Basics/featured.png . Double check that we have the right file by opening it in a image reader\nopen featured.png Write Markdown # Cool so we\u0026rsquo;re now done playing with the blowfish tools, to create the skeleton of our article. Now all that\u0026rsquo;s left to do is to put some flesh on it, namely, write the content of the article\u0026hellip; Here\u0026rsquo;s a quick markdown cheat sheet, for this entire section, just look at the raw source to see how it was done in markdown.\nCode blocks # Code blocks are done like so:\nwhile true: print(\u0026#34;I can write code I swear\u0026#34;) We can choose different language based on what we\u0026rsquo;re writing in order to choose the correct syntax highlighting lexer\nwhile true; do printf \u0026#34;I can write code I swear\u0026#34;; done or specify to use no lexer if what we write isn\u0026rsquo;t actually valid code, or if we don\u0026rsquo;t want syntax highlighting\n- just trying to convey some ideas in a bullet point form here - yep yep - yep Bullet points # one two three one two three one itwo three Hyperlinks # apple.com\nchee-ah.github.io/chee-notes/\nCheckboxes # (for unchecked checkbox) (for checked checkbox) Headings # h1 # h2 # h3 # h4 # Bold / Italic # bold italic\nTables # what where conceptually example memory ram (random access memeory) ephemeral program variable disk file system persistent file There\u0026rsquo;s a lot more we can do with markdown, but it\u0026rsquo;s a good start I think.\nPreview new pages locally # We might want to preview pages locally before publishing, here\u0026rsquo;s how:\nOnce we wrote a new article, we just need to make sure we navigate backc to the root of the repo\npwd /Users/chee/chee-notes And once we\u0026rsquo;re there we can simply run\nhugo server It will launch a local webserver with the development version of our site at http://localhost:1313 we can navigate to it in a browser directly, or run:\nopen http://localhost:1313 Publishing the article # Now assuming we did everything right and wrote our article in valid markdown, all that\u0026rsquo;s left to do is to publish the article. For this we need to use github.\ngit add -u git status git add content/linux/1715028080161-Others---Create-articles-in-a-hugo-site/ git add content/linux/1715029765425-Others---Notes-about-the-bash-shell/ git status git commit -m \u0026#34;Add two new articles\u0026#34; git push Once we push, there\u0026rsquo;s some GitHub Actions CI/CD pipeline setup in the repo which will build and publish our website with hugo. Allow it a few minutes to run and our website should show up published with the new articles in a few minutes\n","date":"6 May 2024","externalUrl":null,"permalink":"/linux/1715028080161-others---create-articles-in-a-hugo-site/","section":"Linux","summary":"","title":"Others - Create articles in a hugo site","type":"linux"},{"content":" Bash Shells # Different types of Shells # There are different types of shells in linux, popular ones are:\nBourne Shell (sh) C Shell (csh or tsh) Korn Shell (ksh) Z Shell (zsh) Bourne again shell (Bash) To check the shell being used: # echo $SHELL To change the default shell: # chsh Bash Shell Features # set custom aliases for the actual commands:\nalias name=value alias dt=date check the history of the shell\nhistory Bash environment variables # read a variable\n$echo $SHELL read all environment variables:\nenv Path Variable: # see the directories defined in path variable:\necho $PAT check if the location of the command can be identified:\nwhich bash ","date":"6 May 2024","externalUrl":null,"permalink":"/linux/1715029765425-others---notes-about-the-bash-shell/","section":"Linux","summary":"","title":"Others - Notes about the bash shell","type":"linux"},{"content":"","date":"6 May 2024","externalUrl":null,"permalink":"/tags/shell/","section":"Tags","summary":"","title":"Shell","type":"tags"},{"content":"","date":"6 May 2024","externalUrl":null,"permalink":"/tags/site/","section":"Tags","summary":"","title":"Site","type":"tags"},{"content":"","date":"6 May 2024","externalUrl":null,"permalink":"/tags/static/","section":"Tags","summary":"","title":"Static","type":"tags"},{"content":" Make a Linux test environment in Docker # Apple\u0026rsquo;s macOS is a Unix-like system, based on BSD, and as such is very similar to Linux. But technically, it\u0026rsquo;s not linux, and it doesn\u0026rsquo;t always have all the exact same tools we need to learn. When we want to experiment with those missing tools, we can use docker.\nHere\u0026rsquo;s a really quick and simple guide on how to spin up a linux test environment in docker.\nCreate a brand new docker container with debian\ndocker run -it --name debian debian /bin/bash If we exit with ctr + d the container will be stopped but not deleted, we can list stopped containers like this:\ndocker ps -a We can delete stopped containers we don\u0026rsquo;t want to keep like that\ndocker rm debian Otherwise here\u0026rsquo;s how to restart our already existing debian docker container\ndocker start debian docker exec -it debian /bin/bash ","date":"6 April 2024","externalUrl":null,"permalink":"/docker/1712428934236-build-a-simple-linux-environment-with-docker/","section":"Docker","summary":"","title":"Build a Simple Linux Environment with Docker","type":"docker"},{"content":" Build a webserver in a container # Create a brand new debian container which exposes port 9090 on the local machine\ndocker run -it --name debian --rm --publish 9090:9090 debian /bin/bash Update our package manager apt, meaning, refresh your list of known packages ready to be downloaded.\napt-get update Use apt to install python in the container, the -venv means install python3, but with the module venv\napt-get install -y python3-venv venv is a python module that we can use to build what\u0026rsquo;s called a virtual environment, it\u0026rsquo;s always a great practice when building python code to run in a virtual environment, I would recommend taking the habbit to always always do that. One venv = one app, and the point is to not mix the dependencies of 2 different apps in the same environment. You can think about it as taking a new blank piece of paper.\npython3 -m venv venv The command above created a virtual enviroment, this means have a new directory called venv, and in this folder we now have an entirely new copy of python.\ncd venv ls -l cd .. We now need to tell the system to use this isolated python for the work that we\u0026rsquo;ll do from now on. This way we won\u0026rsquo;t mix up our dependencies with the system python or any other apps that may be using it.\nsource venv/bin/activate Now your prompt has changed and chows a (venv) prefix, this means we have loaded the venv, we\u0026rsquo;re now in the virtual environment. We\u0026rsquo;re in a blank page.\nSo we can start building our app and installing the tools, we want to use updog, you\u0026rsquo;ll see that a lot of things happen on screen, it tells you that it\u0026rsquo;s collecting and installing a whole lot of things, those are the dependencies of updog, meaning the software libraries that updog needs to function. This is what pip does, it\u0026rsquo;s a package manager, just like apt, but for python. So basically just a utility that knows if I need to run updog, I will need all those things for it to work.\npip install updog So we can just double check that this works, and show the help of updog, if the help shows, we did everything right\nupdog --help So now all that\u0026rsquo;s left to do is start the webserver\nupdog Or with tls/ssl, meaning with encryption over http, so https\nupdog --ssl Expose the container port on LAN # Open another shell in your mac directly, and use netstat in combination with grep to list the listening ports on your machine. The container we just created is exposing it\u0026rsquo;s port 9090 to the local machine, meaning your mac, and your mac is exposing 9090, on the network.\nnetstat -tan | grep LISTEN What does that mean? Think of doors, there are a bunch of doors on each computers, by default in linux we\u0026rsquo;re not listening on any doors, this is why linux is so good at being secure. If you listen on any door, it\u0026rsquo;s because you, the admin, has specifically configured a service, or system, or application, to listen behind that door.\nSo essentially listening means we have a server, ready to serve a client.\nThe server is providing a service The client is consuming the service Let\u0026rsquo;s try it out, from now on we use 2 different computes on the same Local Area Network (LAN), they will have the prefix promps, client and server.\nOn the server, on the mac not in the container, we need to find the ip address of the server. Because it\u0026rsquo;s a mac we need to use ifconfig instead of ip a\nserver# ifconfig en0 We get back the ip address of the server, which is of course a private ip address, meaning it can only be used in the LAN. In our case right now it\u0026rsquo;s 192.168.0.216. So to sumarize, the server has the address 192.168.0.216 and it is listening on the port 9090, so, we know everything we need to actually go talk to that guy.\nUse an other computer on the LAN as a client # On another computer, we can start a client to do that, our client app is called curl, it\u0026rsquo;s stands for C url because it\u0026rsquo;s written in C and it\u0026rsquo;s a C library too. But essentially that\u0026rsquo;s just a program that acts as an HTTP client.\nclient# curl http://192.168.0.216:9090 we\u0026rsquo;ll see data comming from the updog server on the client side, and the server will see logs, telling it that someone is trying to get information from it. We have not offered any files yet though. So let\u0026rsquo;s do that, I\u0026rsquo;ll host those very notes, and you will pull them on your machines, so now I\u0026rsquo;m the server you\u0026rsquo;re the client.\nI\u0026rsquo;m doing to the folder where my notes are and I\u0026rsquo;ll start the server from here, effectively hosting the files that are in that folder\nserver# cd ~/www currently my address is 192.168.0.31, so you can reach me list this from the client side.\nclient# curl http://192.168.0.31:9090/notes.md ","date":"6 April 2024","externalUrl":null,"permalink":"/docker/1712413791271-build-a-webserver-in-a-debian-container-using-python-and-updog/","section":"Docker","summary":"","title":"Build a Webserver in Container Using Python and Updog","type":"docker"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/client/","section":"Tags","summary":"","title":"Client","type":"tags"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/docker/","section":"Docker","summary":"","title":"Docker","type":"docker"},{"content":" CLI (Command Line Interface) Basics # Basic concepts: # Everything in linux is always case sensitive\n. means current directory .. means parent directory .something at the beginning of a filename or folder means it is hidden * means everything something.* globbing (match anything that starts with \u0026#39;something.\u0026#39;) Permissions # drwxrwxrwx || | | || | \\_ other permissions (r = read, w = write, x = execute) || \\_ group permissions (r = read, w = write, x = execute) |\\_ user permissions (r = read, w = write, x = execute) \\_ file type (a dir in our case) Options vs Arguments # The input or stdin of a command line interface (cli) generaly is given in the form of arguments. Those arguments can be either positionnal or optional. Most of the time when you look at the help for a program there is a usage description at the very top, this shows you what the program expects, e.g. how many positional arguments there should be. generally positional arguments are mandatory, and optional arguments are optional\u0026hellip; duh\nThis is not always enforced, but a good practice is to have the options right after the program name and the positionnal after.\n- positional - optional The optional arguments start with a dash and one letter. One letter is the short form. But sometimes, (not always) they also have a long form, denoted with a double dash \u0026ndash;\nExamples:\n-h --help -v --verbose -i --interface -i --insensitive -r --recursive echo \u0026#39;hello world\u0026#39; \\ \\_this is positionnal argument 1 \\_this is the program nc localhost 443 \\ \\ \\_this is positionnal argument 2 \\ \\_this is positionnal argument 1 \\_this is the program nc -v localhost 443 \\ \\ \\ \\_this is positionnal argument 2 \\ \\ \\_this is positionnal argument 1 \\ \\_option v means verbose \\_this is the program Basic commands # pwd previous working directory (shows were you currently are) rm remove (careful it\u0026#39;s dangerous) rmdir remove a directory (you could use rm for dirs too) mkdir make directory (creates a new directory) touch creates an empty file Cd # Change directory\ncd with nothing after also means go home cd ~ go home cd .. go up in the directory structure: parent folder cd - go back in time: previous folder Ls # List files or directories\nls list with no options ls -a list all (including hidden dot files) ls -l list in list format (more detailed) ls -la list all and in list format ls -R list recursively (all child folders contents) ls -aR list recursively and hidden files too Cp # Copy files or directories\ncp copy takes 2 arguments, source (src) and destination (dst) cp src dst would make a copy of \u0026#39;src\u0026#39; into \u0026#39;dst\u0026#39; Mv # Move files or directories\nmv copy takes 2 arguments, source (src) and destination (dst) mv src dst would transform (rename) \u0026#39;src\u0026#39; into \u0026#39;dst\u0026#39; Cat # Cat stands for concatenate, it just reads the content of a file straight to stdout\ncat filename.txt Cut # Cut can be used to manipulate (cut) files\ncat chee.txt hello my name is chee and i\u0026#39;m learning to make spagettis cat chee.txt | cut -d \u0026#39; \u0026#39; -f 1 hello cat chee.txt | cut -d \u0026#39; \u0026#39; -f 2 my cat chee.txt | cut -d \u0026#39; \u0026#39; -f 3 name cat chee.txt | cut -d \u0026#39; \u0026#39; -f 3- name is chee and i\u0026#39;m learning to make spagettis at chee.txt | cut -d \u0026#39; \u0026#39; -f -3 hello my name Using coma as a delimiter\ncat test.txt price,product,location 5.5,saussage,france 3.5,nemh,vietnam cat test.txt | cut -d \u0026#39;,\u0026#39; -f 1 price 5.5 3.5 cat test.txt | cut -d \u0026#39;,\u0026#39; -f 2 product saussage nemh cat test.txt | cut -d \u0026#39;,\u0026#39; -f 3 location france vietnam Head # We\u0026rsquo;re creating a file with lines number 01 to 30 written in it\nfor i in {01..30};do echo line number $i \u0026gt;\u0026gt; data.txt;done cat data.txt line number 01 line number 02 line number 03 line number 04 line number 05 line number 06 line number 07 line number 08 line number 09 line number 10 line number 11 line number 12 line number 13 line number 14 line number 15 line number 16 line number 17 line number 18 line number 19 line number 20 line number 21 line number 22 line number 23 line number 24 line number 25 line number 26 line number 27 line number 28 line number 29 line number 30 Head by default prints the first 10 lines of the file\nhead data.txt line number 01 line number 02 line number 03 line number 04 line number 05 line number 06 line number 07 line number 08 line number 09 line number 10 We can specify how many lines we want to print with the -n option\nhead -n15 data.txt line number 01 line number 02 line number 03 line number 04 line number 05 line number 06 line number 07 line number 08 line number 09 line number 10 line number 11 line number 12 line number 13 line number 14 line number 15 Tail # Tail works the same except it prints the end or the file instead of the beginning\ntail -n15 data.txt line number 16 line number 17 line number 18 line number 19 line number 20 line number 21 line number 22 line number 23 line number 24 line number 25 line number 26 line number 27 line number 28 line number 29 line number 30 Grep # - grep stands for global regular expression and print - so we\u0026#39;re matching text strings in one or multiple files using regex (regular expressions) - regex is a language which sole purpose is to match text - and then we print that to stdout grep chee file grep chee ./* grep -r chee file grep -i chee file grep -E \u0026#39;^[0-9]{2}:[0-9]{2}:[0-9]{2}\u0026#39; ./* -i - case insensitive (lower or upper case) -r - search recursively (in all directories) -E - extended regular expressions (full regex power) Tar # Tar is used to compress files and folders into archives (tar balls)\nSynopsis\n-c create -t list contents -x extract -v verbose -z zip -f filename create an archive called archive-name.tar.gz in zip format containing all archive-file*.txt\ntar -cvzf archive-name.tar.gz archive-file*.txt list the content of the archive without unpacking it\ntar -tf archive-name.tar.gz unpack (extract) the archive\ntar -xvzf archive-name.tar.gz ","date":"6 April 2024","externalUrl":null,"permalink":"/linux/1712426557493-lpi---linux-essentials---common-cli-tools/","section":"Linux","summary":"","title":"LPI - Linux Essentials - Common CLI Tools","type":"linux"},{"content":" Shell Redirects # A program always has the following:\n- sdtin - what is given to the program by the user - sdtout - what the program responds to the user when everything is fine - sdterr - what the program responds to the user when something\u0026#39;s wrong And in a diagram they look like this\n--------- | | ---\u0026gt; stdout stdin ---\u0026gt; | Program | | | ---\u0026gt; stderr --------- Think of redirects as write to\n\u0026gt; - take stdout and send it to a file (overwrite) \u0026gt;\u0026gt; - take stdout and send it to a file (append) 2\u0026gt; - take stderr and send it to a file (overwrite) 2\u0026gt;\u0026gt; - take stderr and send it to a file (append) 2\u0026gt;\u0026amp;1 - take stderr and send it to stdout (channel 1) then send stdout to a file \u0026gt; # example\necho haha \u0026gt; file the program is echo the stdin is haha the stdout is haha we redirected stdout to the file named file the redirection operator is only here once so it\u0026rsquo;s overwriting the file every time --------- | | ---\u0026gt; stdout ---\u0026gt; file stdin ---\u0026gt; | Program | | | ---\u0026gt; stderr --------- \u0026raquo; # example\necho haha \u0026gt;\u0026gt; file the program is echo the stdin is haha the stdout is haha we redirected stdout to the file named file the redirection operator is here twice so it\u0026rsquo;s NOT overwriting the file, it\u0026rsquo;s appending to it every time --------- | | ---\u0026gt; stdout ---\u0026gt; file stdin ---\u0026gt; | Program | | | ---\u0026gt; stderr --------- 2\u0026gt; # example\nnc -vz localhost 80 2\u0026gt; file the program is netcat (nc) the stdin is -vz localhost 80 the stderr is Connection refused (no stdout) we redirected stderr to the file named file the redirection operator is only here once so it\u0026rsquo;s overwriting the file every time --------- | | ---\u0026gt; stdout stdin ---\u0026gt; | Program | | | ---\u0026gt; stderr ---\u0026gt; file --------- 2\u0026raquo; # example\nnc -vz localhost 80 2\u0026gt;\u0026gt; file the program is netcat (nc) the stdin is -vz localhost 80 the stderr is Connection refused (no stdout) we redirected stderr to the file named file the redirection operator is here twice so it\u0026rsquo;s NOT overwriting the file, it\u0026rsquo;s appending to it every time --------- | | ---\u0026gt; stdout stdin ---\u0026gt; | Program | | | ---\u0026gt; stderr ---\u0026gt; file --------- 2\u0026gt;\u0026amp;1 # example\nsudo tcpdump -i wlan0 dst google.com \u0026gt; file 2\u0026gt;\u0026amp;1 the program is tcpdum the stdin is -i wlan0 dst google.com this command gives some stderr but also some stdout they are both displayed into the terminal by default (think walky-talky, listening on both channels) we redirect stderr (channel 2) to the background of stdout (channel 1) so all output eventually goes to stdout we then send stdout to the file --------- | | ---\u0026gt; stdout ---\u0026gt; file stdin ---\u0026gt; | Program | \\ | | ---\u0026gt; stderr --- --------- ","date":"6 April 2024","externalUrl":null,"permalink":"/linux/1712426570291-lpi---linux-essentials---shell-redirects/","section":"Linux","summary":"","title":"LPI - Linux Essentials - Shell Redirects","type":"linux"},{"content":" Basic Commands # - echo \u0026#39;hi\u0026#39; - write something on screen - touch - create file - pwd - previous working directory - cd - change directory (move home if no option) - cd .. - move up a directoryB - cd - - move back to the previous directory - mkdir - make directory - ls - list - ls -l - list in list format - ls -la - list all the files including hidden (dot files) - ls -lt - list sorted by time - ls -ltr - list sorted by time and reversed - which - find where a command\u0026#39;s binary is on the filesystem - date - show the date - uname - show system version info - uname -a - show all system version info - uname -r - show system release version info Variables # Our shell (bash) stores variables, variables are memory addresses where information is stored for later use. We can use the env command to show all variables currently defined in our shell.\nenv Command locations and the $PATH Variable # In Linux everything is a file, even commands. So they are somewhere on the filesystem just like any other file.\nThe system uses a variable called $PATH which is basically a place that remembers all the filesystem paths where Linux will look for commands it can execute. We can display the content of the variable.\nCommand structure # Brew to Install New Things on a Mac # - brew install - install something new - brew upgrade - upgrade all the things you already have Terminal Signals # - cltr + l = clear - cltr + c = kill - cltr + d = disconnect Text Editors # - vim - a text editor (pretty annoying an hard) - nano - a simple text editor (ctrl + x to quitw) Linux Famillies and branches # - Debian - Ubuntu - Kali Linux - Deepin - Pop OS - Red Hat (RHEL) - Centos - Oracle Linux - Suze - Other - Arch Linux - Alpine - Manjaro - ... - .. - . GitHub # git status git add -u git commit -m \u0026#34;Information about whatever you just added\u0026#34; git push Curl (an http client) # - curl - c (like the language) url (like an internet link) - curl https://example.com Updog (a simple python server) # - updog - like what\u0026#39;s up dawg Start the server\nupdog Query the server\ncurl http://localhost:9090/chee.md Python # Here\u0026rsquo;s how to install a python virtual environment\npython3 -m venv venv source venv/bin/activate pip install -U pip Then install a package in there\npip install updog Tmux # - tmux = terminal multiplexer - leader key = ctrl + b - leader + % = split vertically - leader + \u0026#34; = splict horizontally - leader + right = go right - leader + left = go left - leader + up = go up - leader + down = go down ","date":"6 April 2024","externalUrl":null,"permalink":"/linux/1712426513705-lpi---linux-essentials---the-basics/","section":"Linux","summary":"","title":"LPI - Linux Essentials - The Basics","type":"linux"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/server/","section":"Tags","summary":"","title":"Server","type":"tags"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/test-environment/","section":"Tags","summary":"","title":"Test Environment","type":"tags"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/updog/","section":"Tags","summary":"","title":"Updog","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"}]