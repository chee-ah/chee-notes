
[{"content":" Make a Linux test environment in Docker # Apple\u0026rsquo;s macOS is a Unix-like system, based on BSD, and as such is very similar to Linux. But technically, it\u0026rsquo;s not linux, and it doesn\u0026rsquo;t always have all the exact same tools we need to learn. When we want to experiment with those missing tools, we can use docker.\nHere\u0026rsquo;s a really quick and simple guide on how to spin up a linux test environment in docker.\nCreate a brand new docker container with debian\ndocker run -it --name debian debian /bin/bash If we exit with ctr + d the container will be stopped but not deleted, we can list stopped containers like this:\ndocker ps -a We can delete stopped containers we don\u0026rsquo;t want to keep like that\ndocker rm debian Otherwise here\u0026rsquo;s how to restart our already existing debian docker container\ndocker start debian docker exec -it debian /bin/bash ","date":"6 April 2024","externalUrl":null,"permalink":"/docker/1712428934236-build-a-simple-linux-environment-with-docker/","section":"Docker","summary":"Make a Linux test environment in Docker # Apple\u0026rsquo;s macOS is a Unix-like system, based on BSD, and as such is very similar to Linux.","title":"Build a Simple Linux Environment with Docker","type":"docker"},{"content":" Build a webserver in a container # Create a brand new debian container which exposes port 9090 on the local machine\ndocker run -it --name debian --rm --publish 9090:9090 debian /bin/bash Update our package manager apt, meaning, refresh your list of known packages ready to be downloaded.\napt-get update Use apt to install python in the container, the -venv means install python3, but with the module venv\napt-get install -y python3-venv venv is a python module that we can use to build what\u0026rsquo;s called a virtual environment, it\u0026rsquo;s always a great practice when building python code to run in a virtual environment, I would recommend taking the habbit to always always do that. One venv = one app, and the point is to not mix the dependencies of 2 different apps in the same environment. You can think about it as taking a new blank piece of paper.\npython3 -m venv venv The command above created a virtual enviroment, this means have a new directory called venv, and in this folder we now have an entirely new copy of python.\ncd venv ls -l cd .. We now need to tell the system to use this isolated python for the work that we\u0026rsquo;ll do from now on. This way we won\u0026rsquo;t mix up our dependencies with the system python or any other apps that may be using it.\nsource venv/bin/activate Now your prompt has changed and chows a (venv) prefix, this means we have loaded the venv, we\u0026rsquo;re now in the virtual environment. We\u0026rsquo;re in a blank page.\nSo we can start building our app and installing the tools, we want to use updog, you\u0026rsquo;ll see that a lot of things happen on screen, it tells you that it\u0026rsquo;s collecting and installing a whole lot of things, those are the dependencies of updog, meaning the software libraries that updog needs to function. This is what pip does, it\u0026rsquo;s a package manager, just like apt, but for python. So basically just a utility that knows if I need to run updog, I will need all those things for it to work.\npip install updog So we can just double check that this works, and show the help of updog, if the help shows, we did everything right\nupdog --help So now all that\u0026rsquo;s left to do is start the webserver\nupdog Or with tls/ssl, meaning with encryption over http, so https\nupdog --ssl Expose the container port on LAN # Open another shell in your mac directly, and use netstat in combination with grep to list the listening ports on your machine. The container we just created is exposing it\u0026rsquo;s port 9090 to the local machine, meaning your mac, and your mac is exposing 9090, on the network.\nnetstat -tan | grep LISTEN What does that mean? Think of doors, there are a bunch of doors on each computers, by default in linux we\u0026rsquo;re not listening on any doors, this is why linux is so good at being secure. If you listen on any door, it\u0026rsquo;s because you, the admin, has specifically configured a service, or system, or application, to listen behind that door.\nSo essentially listening means we have a server, ready to serve a client.\nThe server is providing a service The client is consuming the service Let\u0026rsquo;s try it out, from now on we use 2 different computes on the same Local Area Network (LAN), they will have the prefix promps, client and server.\nOn the server, on the mac not in the container, we need to find the ip address of the server. Because it\u0026rsquo;s a mac we need to use ifconfig instead of ip a\nserver# ifconfig en0 We get back the ip address of the server, which is of course a private ip address, meaning it can only be used in the LAN. In our case right now it\u0026rsquo;s 192.168.0.216. So to sumarize, the server has the address 192.168.0.216 and it is listening on the port 9090, so, we know everything we need to actually go talk to that guy.\nUse an other computer on the LAN as a client # On another computer, we can start a client to do that, our client app is called curl, it\u0026rsquo;s stands for C url because it\u0026rsquo;s written in C and it\u0026rsquo;s a C library too. But essentially that\u0026rsquo;s just a program that acts as an HTTP client.\nclient# curl http://192.168.0.216:9090 we\u0026rsquo;ll see data comming from the updog server on the client side, and the server will see logs, telling it that someone is trying to get information from it. We have not offered any files yet though. So let\u0026rsquo;s do that, I\u0026rsquo;ll host those very notes, and you will pull them on your machines, so now I\u0026rsquo;m the server you\u0026rsquo;re the client.\nI\u0026rsquo;m doing to the folder where my notes are and I\u0026rsquo;ll start the server from here, effectively hosting the files that are in that folder\nserver# cd ~/www currently my address is 192.168.0.31, so you can reach me list this from the client side.\nclient# curl http://192.168.0.31:9090/notes.md ","date":"6 April 2024","externalUrl":null,"permalink":"/docker/1712413791271-build-a-webserver-in-a-debian-container-using-python-and-updog/","section":"Docker","summary":"Build a webserver in a container # Create a brand new debian container which exposes port 9090 on the local machine","title":"Build a Webserver in Container Using Python and Updog","type":"docker"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/","section":"Chee's Notes","summary":"","title":"Chee's Notes","type":"page"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/client/","section":"Tags","summary":"","title":"Client","type":"tags"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/docker/","section":"Docker","summary":"","title":"Docker","type":"docker"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/linux/","section":"Linux","summary":"","title":"Linux","type":"linux"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/linux-essentials/","section":"Tags","summary":"","title":"Linux Essentials","type":"tags"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/lpi/","section":"Tags","summary":"","title":"LPI","type":"tags"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/series/lpi---linux-essentials/","section":"Series","summary":"","title":"LPI - Linux Essentials","type":"series"},{"content":" CLI (Command Line Interface) Basics # Basic concepts: # Everything in linux is always case sensitive\n. means current directory .. means parent directory .something at the beginning of a filename or folder means it is hidden * means everything something.* globbing (match anything that starts with \u0026#39;something.\u0026#39;) Permissions # drwxrwxrwx || | | || | \\_ other permissions (r = read, w = write, x = execute) || \\_ group permissions (r = read, w = write, x = execute) |\\_ user permissions (r = read, w = write, x = execute) \\_ file type (a dir in our case) Options vs Arguments # The input or stdin of a command line interface (cli) generaly is given in the form of arguments. Those arguments can be either positionnal or optional. Most of the time when you look at the help for a program there is a usage description at the very top, this shows you what the program expects, e.g. how many positional arguments there should be. generally positional arguments are mandatory, and optional arguments are optional\u0026hellip; duh\nThis is not always enforced, but a good practice is to have the options right after the program name and the positionnal after.\n- positional - optional The optional arguments start with a dash and one letter. One letter is the short form. But sometimes, (not always) they also have a long form, denoted with a double dash \u0026ndash;\nExamples:\n-h --help -v --verbose -i --interface -i --insensitive -r --recursive echo \u0026#39;hello world\u0026#39; \\ \\_this is positionnal argument 1 \\_this is the program nc localhost 443 \\ \\ \\_this is positionnal argument 2 \\ \\_this is positionnal argument 1 \\_this is the program nc -v localhost 443 \\ \\ \\ \\_this is positionnal argument 2 \\ \\ \\_this is positionnal argument 1 \\ \\_option v means verbose \\_this is the program Basic commands # pwd previous working directory (shows were you currently are) rm remove (careful it\u0026#39;s dangerous) rmdir remove a directory (you could use rm for dirs too) mkdir make directory (creates a new directory) touch creates an empty file Change directory # cd with nothing after also means go home cd ~ go home cd .. go up in the directory structure: parent folder cd - go back in time: previous folder List files or directories # ls list with no options ls -a list all (including hidden dot files) ls -l list in list format (more detailed) ls -la list all and in list format ls -R list recursively (all child folders contents) ls -aR list recursively and hidden files too Copy files or directories # cp copy takes 2 arguments, source (src) and destination (dst) cp src dst would make a copy of \u0026#39;src\u0026#39; into \u0026#39;dst\u0026#39; Move files or directories # mv copy takes 2 arguments, source (src) and destination (dst) mv src dst would transform (rename) \u0026#39;src\u0026#39; into \u0026#39;dst\u0026#39; Cat # Cat stands for concatenate, it just reads the content of a file straight to stdout\ncat filename.txt Cut # cat chee.txt hello my name is chee and i\u0026#39;m learning to make spagettis cat chee.txt | cut -d \u0026#39; \u0026#39; -f 1 hello cat chee.txt | cut -d \u0026#39; \u0026#39; -f 2 my cat chee.txt | cut -d \u0026#39; \u0026#39; -f 3 name cat chee.txt | cut -d \u0026#39; \u0026#39; -f 3- name is chee and i\u0026#39;m learning to make spagettis at chee.txt | cut -d \u0026#39; \u0026#39; -f -3 hello my name Using coma as a delimiter\ncat test.txt price,product,location 5.5,saussage,france 3.5,nemh,vietnam cat test.txt | cut -d \u0026#39;,\u0026#39; -f 1 price 5.5 3.5 cat test.txt | cut -d \u0026#39;,\u0026#39; -f 2 product saussage nemh cat test.txt | cut -d \u0026#39;,\u0026#39; -f 3 location france vietnam Head # We\u0026rsquo;re creating a file with lines number 01 to 30 written in it\nfor i in {01..30};do echo line number $i \u0026gt;\u0026gt; data.txt;done cat data.txt line number 01 line number 02 line number 03 line number 04 line number 05 line number 06 line number 07 line number 08 line number 09 line number 10 line number 11 line number 12 line number 13 line number 14 line number 15 line number 16 line number 17 line number 18 line number 19 line number 20 line number 21 line number 22 line number 23 line number 24 line number 25 line number 26 line number 27 line number 28 line number 29 line number 30 Head by default prints the first 10 lines of the file\nhead data.txt line number 01 line number 02 line number 03 line number 04 line number 05 line number 06 line number 07 line number 08 line number 09 line number 10 We can specify how many lines we want to print with the -n option\nhead -n15 data.txt line number 01 line number 02 line number 03 line number 04 line number 05 line number 06 line number 07 line number 08 line number 09 line number 10 line number 11 line number 12 line number 13 line number 14 line number 15 Tail # Tail works the same except it prints the end or the file instead of the beginning\ntail -n15 data.txt line number 16 line number 17 line number 18 line number 19 line number 20 line number 21 line number 22 line number 23 line number 24 line number 25 line number 26 line number 27 line number 28 line number 29 line number 30 Grep # - grep stands for global regular expression and print - so we\u0026#39;re matching text strings in one or multiple files using regex (regular expressions) - regex is a language which sole purpose is to match text - and then we print that to stdout grep chee file grep chee ./* grep -r chee file grep -i chee file grep -E \u0026#39;^[0-9]{2}:[0-9]{2}:[0-9]{2}\u0026#39; ./* -i - case insensitive (lower or upper case) -r - search recursively (in all directories) -E - extended regular expressions (full regex power) Tar # Tar is used to compress files and folders into archives (tar balls)\nSynopsis\n-c create -t list contents -x extract -v verbose -z zip -f filename create an archive called archive-name.tar.gz in zip format containing all archive-file*.txt\ntar -cvzf archive-name.tar.gz archive-file*.txt list the content of the archive without unpacking it\ntar -tf archive-name.tar.gz unpack (extract) the archive\ntar -xvzf archive-name.tar.gz ","date":"6 April 2024","externalUrl":null,"permalink":"/linux/1712426557493-lpi---linux-essentials---common-cli-tools/","section":"Linux","summary":"CLI (Command Line Interface) Basics # Basic concepts: # Everything in linux is always case sensitive","title":"LPI - Linux Essentials - Common CLI Tools","type":"linux"},{"content":" Shell Redirects # A program always has the following:\n- sdtin - what is given to the program by the user - sdtout - what the program responds to the user when everything is fine - sdterr - what the program responds to the user when something\u0026#39;s wrong And in a diagram they look like this\n--------- | | ---\u0026gt; stdout stdin ---\u0026gt; | Program | | | ---\u0026gt; stderr --------- Think of redirects as write to\n\u0026gt; - take stdout and send it to a file (overwrite) \u0026gt;\u0026gt; - take stdout and send it to a file (append) 2\u0026gt; - take stderr and send it to a file (overwrite) 2\u0026gt;\u0026gt; - take stderr and send it to a file (append) 2\u0026gt;\u0026amp;1 - take stderr and send it to stdout (channel 1) then send stdout to a file \u0026gt; # example\necho haha \u0026gt; file the program is echo the stdin is haha the stdout is haha we redirected stdout to the file named file the redirection operator is only here once so it\u0026rsquo;s overwriting the file every time --------- | | ---\u0026gt; stdout ---\u0026gt; file stdin ---\u0026gt; | Program | | | ---\u0026gt; stderr --------- \u0026raquo; # example\necho haha \u0026gt;\u0026gt; file the program is echo the stdin is haha the stdout is haha we redirected stdout to the file named file the redirection operator is here twice so it\u0026rsquo;s NOT overwriting the file, it\u0026rsquo;s appending to it every time --------- | | ---\u0026gt; stdout ---\u0026gt; file stdin ---\u0026gt; | Program | | | ---\u0026gt; stderr --------- 2\u0026gt; # example\nnc -vz localhost 80 2\u0026gt; file the program is netcat (nc) the stdin is -vz localhost 80 the stderr is Connection refused (no stdout) we redirected stderr to the file named file the redirection operator is only here once so it\u0026rsquo;s overwriting the file every time --------- | | ---\u0026gt; stdout stdin ---\u0026gt; | Program | | | ---\u0026gt; stderr ---\u0026gt; file --------- 2\u0026raquo; # example\nnc -vz localhost 80 2\u0026gt;\u0026gt; file the program is netcat (nc) the stdin is -vz localhost 80 the stderr is Connection refused (no stdout) we redirected stderr to the file named file the redirection operator is here twice so it\u0026rsquo;s NOT overwriting the file, it\u0026rsquo;s appending to it every time --------- | | ---\u0026gt; stdout stdin ---\u0026gt; | Program | | | ---\u0026gt; stderr ---\u0026gt; file --------- 2\u0026gt;\u0026amp;1 # example\nsudo tcpdump -i wlan0 dst google.com \u0026gt; file 2\u0026gt;\u0026amp;1 the program is tcpdum the stdin is -i wlan0 dst google.com this command gives some stderr but also some stdout they are both displayed into the terminal by default (think walky-talky, listening on both channels) we redirect stderr (channel 2) to the background of stdout (channel 1) so all output eventually goes to stdout we then send stdout to the file --------- | | ---\u0026gt; stdout ---\u0026gt; file stdin ---\u0026gt; | Program | \\ | | ---\u0026gt; stderr --- --------- ","date":"6 April 2024","externalUrl":null,"permalink":"/linux/1712426570291-lpi---linux-essentials---shell-redirects/","section":"Linux","summary":"Shell Redirects # A program always has the following:","title":"LPI - Linux Essentials - Shell Redirects","type":"linux"},{"content":" Basic Commands # - touch - create file - pwd - previous working directory - cd - change directory (move home if no option) - cd .. - move up a directoryB - cd - - move back to the previous directory - mkdir - make directory - ls - list - ls -l - list in list format - ls -la - list all the files including hidden (dot files) - ls -lt - list sorted by time - ls -ltr - list sorted by time and reversed Brew to Install New Things on a Mac # - brew install - install something new - brew upgrade - upgrade all the things you already have Terminal Signals # - cltr + l = clear - cltr + c = kill - cltr + d = disconnect Text Editors # - vim - a text editor (pretty annoying an hard) - nano - a simple text editor (ctrl + x to quitw) Linux Famillies and branches # - Debian - Ubuntu - Kali Linux - Deepin - Pop OS - Red Hat (RHEL) - Centos - Oracle Linux - Suze - Other - Arch Linux - Alpine - Manjaro - ... - .. - . GitHub # git status git add -u git commit -m \u0026#34;Information about whatever you just added\u0026#34; git push Curl (an http client) # - curl - c (like the language) url (like an internet link) - curl https://example.com Updog (a simple python server) # - updog - like what\u0026#39;s up dawg Start the server\nupdog Query the server\ncurl http://localhost:9090/chee.md Python # Here\u0026rsquo;s how to install a python virtual environment\npython3 -m venv venv source venv/bin/activate pip install -U pip Then install a package in there\npip install updog Tmux # - tmux = terminal multiplexer - leader key = ctrl + b - leader + % = split vertically - leader + \u0026#34; = splict horizontally - leader + right = go right - leader + left = go left - leader + up = go up - leader + down = go down ","date":"6 April 2024","externalUrl":null,"permalink":"/linux/1712426513705-lpi---linux-essentials---the-basics/","section":"Linux","summary":"Basic Commands # - touch - create file - pwd - previous working directory - cd - change directory (move home if no option) - cd .","title":"LPI - Linux Essentials - The Basics","type":"linux"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/server/","section":"Tags","summary":"","title":"Server","type":"tags"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/study-notes/","section":"Tags","summary":"","title":"Study Notes","type":"tags"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/test-environment/","section":"Tags","summary":"","title":"Test Environment","type":"tags"},{"content":"","date":"6 April 2024","externalUrl":null,"permalink":"/tags/updog/","section":"Tags","summary":"","title":"Updog","type":"tags"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"}]